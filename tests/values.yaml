metadata:
  enabled: true

securityContext:
  runAsNonRoot: true
  runAsUser: 33 # www-data

ingress:
  enabled: true
  annotations:
    example-annotation: 'coucou'
  hostGroups:
    host1:
      tls:
        enabled: true
        secretName: my-tls-secret
      hosts:
        - test1.example.com
        - test2.example.com
    host2:
      tls:
        enabled: true
      hosts:
        - '*.example.com'

dockerregistry:
  annotations:
    testAnnotation: annotation value
  content:
    https://index.docker.io/v1/:
      email: docker-hub@camptocamp.com
      username: c2cgisbot
      password: '1234'
    docker.io:
      email: docker-hub@camptocamp.com
      username: c2cgisbot
      password: '1234'
    ghcr.io:
      email: geospatial-bot@camptocamp.com
      username: c2c-bot-gis-ci
      password: '1234'

secrets:
  enabled: true
  annotations:
    testAnnotation: annotation value for secrets
  content:
    test:
      value: toto
    test2:
      value: toto2
    test3:
      type: basicAuth
      user: toto
      password: toto

externalSecrets:
  app:
    enabled: true
    refreshInterval: 1h
    secretStoreRef:
      name: my-secret-store
      kind: SecretStore
    data:
      hostname:
        remoteRef:
          key: hostname
  global:
    enabled: true
    refreshInterval: 1h
    secretStoreRef:
      name: my-global-secret-store
      kind: SecretStore
    data:
      pass:
        remoteRef:
          key: pass

configMaps:
  annotations:
    testAnnotation: annotation value for configmaps
  content:
    testSingleLine:
      value: toto
    testMultiLine:
      value: |-
        toto2
        titi
        tutu
    testYaml:
      type: yaml
      value:
        toto: toto
        titi: titi
        tutu: tutu
    testJson:
      type: json
      value:
        toto: toto
        titi: titi
        tutu: tutu

serviceAccount:
  create: true
  name: example3-service-account
  serviceName: myserviceaccount
  annotations:
    example-annotation: coucou

services:
  example1:
    enabled: true
    pdb:
      enabled: false
    ingress:
      enabled: true
      path: /one
    podMonitor:
      enabled: true
      endpoint:
        port: prometheus
        interval: 10s
        honorLabels: true
    replicaCount: 1
    nodeSelector: {}
    affinity:
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    serviceName: with-service-name
    initContainers:
      aa: &aa
        image:
          repository: camptocamp/custom-aa
          tag: latest
          sha:
        command:
          - sleep
          - '3600'
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 50Mi
        env:
          TEST:
            value: aa
      bb: &bb
        env:
          MY_ENV_VAR:
            value: some-value
          JWT_SECRET_KEY:
            type: secret
            name: jwt-key-secret
            key: JWT_SECRET_KEY
          APP_KUBERNETES_IO_COMPONENT:
            type: valueFrom
            valueFrom:
              fieldRef:
                fieldPath: "metadata.labels['app.kubernetes.io/component']"
        image:
          repository: camptocamp/custom-bb
          tag: latest
          sha:
        args:
          - sleep
          - '3600'
        volumeMounts:
          /tmp/my-volume/config:
            name: my-volume
            subPath: config
            readOnly: true
          /tmp/my-volume/data:
            name: my-volume
            subPath: data

    containers:
      cc:
        <<: *aa
        lifecycle:
          preStop:
            exec:
              command:
                - /bin/bash
                - -c
                - 'true'

      dd:
        <<: *bb
        livenessProbe:
          httpGet:
            path: /heals/liveness
            port: http
        readinessProbe:
          httpGet:
            path: /heals/readiness
            port: http
          initialDelaySeconds: 5
          timeoutSeconds: 10
          periodSeconds: 20
        startupProbe:
          httpGet:
            path: /heals/startup
            port: http
        ports:
          http:
            containerPort: 8080
            protocol: TCP

    volumes:
      my-volume:
        emptyDir: {}
      my-device-volume:
        persistentVolumeClaim:
          claimName: pvc-name
      self-configmap:
        configMap:
          items:
            - key: testYaml
              path: test.yaml
      self-secret:
        secret: {}
      self-configmap-metadata:
        configMap:
          name: self-metadata
          items:
            - key: testYaml
              path: test.yaml
      self-external-secret:
        secret:
          secretName: self-external-secret-app
          items:
            - key: hostname
              path: hostname.txt

    service: &servicedefinition
      type: ClusterIP
      servicePort: 8080
      ports:
        - name: http
          port: 8080
          protocol: TCP
          targetPort: http

  example2:
    releaseTrunc: 15
    prefixTrunc: 3

    affinity:
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname

    ingress:
      enabled: true
      path: /two
    enabled: true
    replicaCount: 2

    pdb:
      minAvailable: 2

    containers:
      cc:
        <<: *aa
      dd:
        <<: *bb
        livenessProbe:
          httpGet:
            path: /
            port: http
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          timeoutSeconds: 10
          periodSeconds: 20
        startupProbe:
          httpGet:
            path: /
            port: http
        ports:
          http:
            containerPort: 8080
            protocol: TCP

    volumes:
      my-volume:
        emptyDir: {}
      my-volume-2:
        emptyDir: {}

    service:
      <<: *servicedefinition
      labels:
        one-custom-label: 'hello-world'
      annotations:
        one-custom-annotation: 'abc'
        two-custom-annotations: 'xyz'

  example3:
    ingress:
      enabled: true
      path: /three
    enabled: true
    replicaCount: 2

    nameOverride: with-name-override

    affinity:
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname

    pdb:
      maxUnavailable: 3

    containers:
      cc:
        <<: *aa
      dd:
        <<: *bb
        livenessProbe:
          httpGet:
            path: /
            port: http
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          timeoutSeconds: 10
          periodSeconds: 20
        startupProbe:
          httpGet:
            path: /
            port: http
        ports:
          http:
            containerPort: 8080
            protocol: TCP

    volumes:
      my-volume:
        emptyDir: {}
      my-volume-2:
        emptyDir: {}

    service:
      <<: *servicedefinition
      name: hardcoded-service-name

  # Eyample with labelSelector in affinity
  example4:
    enabled: true
    affinity:
      podAntiAffinity:
        labelSelector:
          k1: v1
        topologyKey: kubernetes.io/hostname
    containers:
      main:
        image:
          repository: camptocamp/image
          tag: latest

  # Minimal configuration of a deployment
  deployment-min:
    enabled: true
    containers:
      main:
        image:
          repository: camptocamp/image
          tag: latest
  # Deployment with all the possible options
  deployment-all:
    enabled: true
    replicas: 3
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
                - key: disktype
                  operator: In
                  values:
                    - ssd

    progressDeadlineSeconds: 600
    minReadySeconds: 10
    paused: false
    containers:
      main:
        image:
          repository: camptocamp/image
          tag: latest
  # Minimal configuration of a daemonset
  statefulset-min:
    enabled: true
    type: StatefulSet
    containers:
      main:
        image:
          repository: camptocamp/image
          tag: latest
  # Daemonset with all the possible options
  statefulset-all:
    enabled: true
    type: StatefulSet
    serviceName: 'nginx'
    replicas: 3
    minReadySeconds: 10
    podManagementPolicy: Parallel
    ordinals:
      start: 0
    updateStrategy:
      type: RollingUpdate
      rollingUpdate:
        partition: 0
    containers:
      main:
        image:
          repository: camptocamp/image
          tag: latest
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Delete
    volumeClaimTemplates:
      - metadata:
          name: www
        spec:
          accessModes: ['ReadWriteOnce']
          storageClassName: 'my-storage-class'
          resources:
            requests:
              storage: 1Gi
  # Minimal configuration of a job
  job-min:
    enabled: true
    type: Job
    # not available in k8s <= 1.27
    # podReplacementPolicy: OnFailure
    restartPolicy: Never
    containers:
      main:
        image:
          repository: camptocamp/image
          tag: latest
  # Job with all the possible options
  job-all:
    enabled: true
    type: Job
    backoffLimit: 5
    completions: 10
    parallelism: 3
    completionMode: Indexed
    # not available in k8s <= 1.27
    # backoffLimitPerIndex: 1
    # maxFailedIndexes: 5
    activeDeadlineSeconds: 600
    ttlSecondsAfterFinished: 600
    # not available in k8s <= 1.27
    # podReplacementPolicy: OnFailure
    restartPolicy: Never
    podFailurePolicy:
      rules:
        - action: FailJob
          onExitCodes:
            containerName: main # optional
            operator: In # one of: In, NotIn
            values: [42]
        - action: Ignore # one of: Ignore, FailJob, Count
          onPodConditions:
            - type: DisruptionTarget # indicates Pod disruption
    suspend: false
    containers:
      main:
        image:
          repository: camptocamp/image
          tag: latest

  cronjob-all:
    enabled: true
    schedule: '*/1 * * * *'
    concurrencyPolicy: Forbid
    successfulJobsHistoryLimit: 2
    failedJobsHistoryLimit: 2
    type: CronJob
    backoffLimit: 5
    completions: 10
    parallelism: 3
    completionMode: Indexed
    # not available in k8s <= 1.27
    # backoffLimitPerIndex: 1
    # maxFailedIndexes: 5
    activeDeadlineSeconds: 600
    ttlSecondsAfterFinished: 600
    # not available in k8s <= 1.27
    # podReplacementPolicy: OnFailure
    restartPolicy: Never
    podFailurePolicy:
      rules:
        - action: FailJob
          onExitCodes:
            containerName: main # optional
            operator: In # one of: In, NotIn
            values: [42]
        - action: Ignore # one of: Ignore, FailJob, Count
          onPodConditions:
            - type: DisruptionTarget # indicates Pod disruption
              status: 'True'
    suspend: false
    containers:
      main:
        image:
          repository: camptocamp/image
          tag: latest

  # Test internal env
  internal:
    enabled: true
    containers:
      main:
        image:
          repository: camptocamp/image
          tag: latest
        env:
          SELF_CONFIGMAP:
            type: configMap
            name: self
            key: testSingleLine
          SELF_SECRET:
            type: secret
            name: self
            key: test
          SELF_METADATA:
            type: configMap
            name: self-metadata
            key: CHART_NAME
          SELF_VAULT:
            type: secret
            name: self-external-secret-app
            key: hostname

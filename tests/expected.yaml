---
# Source: application/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: example-application-deployment-all
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: deployment-all
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: deployment-all
---
# Source: application/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: example-application-deployment-min
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: deployment-min
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: deployment-min
---
# Source: application/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: exa-example2
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example2
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: example2
---
# Source: application/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: example-with-name-override-example3
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example3
spec:
  maxUnavailable: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: with-name-override
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: example3
---
# Source: application/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: example-application-example4
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example4
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: example4
---
# Source: application/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: example-application-example5
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example5
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: example5
---
# Source: application/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: example-application-internal
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: internal
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: internal
---
# Source: application/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: example-application-nginx
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: nginx
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: nginx
---
# Source: application/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: example-application-statefulset-min
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: statefulset-min
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: statefulset-min
---
# Source: application/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-application-myserviceaccount
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: myserviceaccount
  annotations:
    example-annotation: coucou
---
# Source: application/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: example-application
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: main
  annotations:
    testAnnotation: annotation value for secrets
type: generic
data:
  test: dG90bw==
  test2: dG90bzI=
  test3: "UW1GemFXTWdkRzkwYnpwMGIzUnY="
---
# Source: application/templates/cm_metadata.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-application-metadata
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: main
data:
  CHART_NAME: application
  RELEASE_NAME: example
  RELEASE_NAMESPACE: default
  SERVICE_CRONJOB-ALL_NAME: example-application-cronjob-all
  SERVICE_CRONJOB-ALL_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_DEPLOYMENT-ALL_NAME: example-application-deployment-all
  SERVICE_DEPLOYMENT-ALL_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_DEPLOYMENT-MIN_NAME: example-application-deployment-min
  SERVICE_DEPLOYMENT-MIN_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE1_NAME: example-application-with-service-name
  SERVICE_EXAMPLE1_CONTAINER_AA_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE1_CONTAINER_BB_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE1_CONTAINER_CC_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE1_CONTAINER_DD_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE2_NAME: exa-example2
  SERVICE_EXAMPLE2_CONTAINER_CC_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE2_CONTAINER_DD_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE3_NAME: hardcoded-service-name
  SERVICE_EXAMPLE3_CONTAINER_CC_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE3_CONTAINER_DD_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE4_NAME: example-application-example4
  SERVICE_EXAMPLE4_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE5_NAME: service-autoscaled
  SERVICE_EXAMPLE5_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_INTERNAL_NAME: example-application-internal
  SERVICE_INTERNAL_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_JOB-ALL_NAME: example-application-job-all
  SERVICE_JOB-ALL_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_JOB-MIN_NAME: example-application-job-min
  SERVICE_JOB-MIN_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_STATEFULSET-ALL_NAME: example-application-nginx
  SERVICE_STATEFULSET-ALL_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_STATEFULSET-MIN_NAME: example-application-statefulset-min
  SERVICE_STATEFULSET-MIN_CONTAINER_MAIN_IMAGE_TAG: "latest"
---
# Source: application/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-application
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: main
  annotations:
    testAnnotation: annotation value for configmaps
data:
  testJson: |-
    {"titi":"titi","toto":"toto","tutu":"tutu"}
  testMultiLine: |-
    toto2
    titi
    tutu
  testSingleLine: |-
    toto
  testYaml: |-
    titi: titi
    toto: toto
    tutu: tutu
---
# Source: application/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-application-with-service-name
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: with-service-name
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: with-service-name
---
# Source: application/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: exa-example2
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example2
    one-custom-label: hello-world
  annotations:
    one-custom-annotation: abc
    two-custom-annotations: xyz
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example2
---
# Source: application/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hardcoded-service-name
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example3
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example3
---
# Source: application/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: service-autoscaled
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example5
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
  selector:
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example5
---
# Source: application/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-application-deployment-all
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: deployment-all
spec:
  replicas: 3
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
  progressDeadlineSeconds: 600
  minReadySeconds: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: deployment-all
  template:
    metadata:
      labels:
        app.kubernetes.io/name: application
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: deployment-all
    spec:
      imagePullSecrets:
        - name: example-application-docker-registry
      serviceAccountName: example-application-myserviceaccount
      securityContext:
        {}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: disktype
                operator: In
                values:
                - ssd
            weight: 1
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: application/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-application-deployment-min
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: deployment-min
spec:
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: deployment-min
  template:
    metadata:
      labels:
        app.kubernetes.io/name: application
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: deployment-min
    spec:
      imagePullSecrets:
        - name: example-application-docker-registry
      serviceAccountName: example-application-myserviceaccount
      securityContext:
        {}
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: application/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-application-with-service-name
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: with-service-name
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: with-service-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: application
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: with-service-name
    spec:
      imagePullSecrets:
        - name: example-application-docker-registry
      serviceAccountName: example-application-myserviceaccount
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - application
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - example
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - with-service-name
              topologyKey: "kubernetes.io/hostname"
      initContainers:
        - name: aa
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-aa:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TEST"
              value: aa
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          command:
            - sleep
            - "3600"
        - name: bb
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-bb:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MY_ENV_VAR"
              value: some-value
          terminationMessagePolicy: FallbackToLogsOnError
          args:
            - sleep
            - "3600"
          volumeMounts:
            - mountPath: /tmp/my-volume/config
              name: my-volume
              readOnly: true
              subPath: config
            - mountPath: /tmp/my-volume/data
              name: my-volume
              subPath: data

      containers:
        - name: cc
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-aa:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TEST"
              value: aa
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/bash
                - -c
                - "true"
          command:
            - sleep
            - "3600"
          workingDir: /tmp
        - name: dd
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-bb:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MY_ENV_VAR"
              value: some-value
          terminationMessagePolicy: FallbackToLogsOnError
          args:
            - sleep
            - "3600"
          volumeMounts:
            - mountPath: /tmp/my-volume/config
              name: my-volume
              readOnly: true
              subPath: config
            - mountPath: /tmp/my-volume/data
              name: my-volume
              subPath: data

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: /heals/liveness
              port: http
          readinessProbe:
            httpGet:
              path: /heals/readiness
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /heals/startup
              port: http

      volumes:
        - name: config-map-override
          configMap:
            name: "test-overridden"
        - name: my-device-volume
          persistentVolumeClaim:
            claimName: pvc-name
        - name: my-volume
          emptyDir: {}
        - name: self-configmap
          configMap:
            name: example-application
            items:
            - key: testYaml
              path: test.yaml
        - name: self-configmap-metadata
          configMap:
            name: example-application-metadata
            items:
            - key: testYaml
              path: test.yaml
        - name: self-external-secret
          secret:
            secretName: example-application-app
            items:
            - key: hostname
              path: hostname.txt
        - name: self-secret
          secret:
            secretName: example-application
---
# Source: application/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: exa-example2
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example2
spec:
  replicas: 2
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: example2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: application
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: example2
    spec:
      imagePullSecrets:
        - name: example-application-docker-registry
      serviceAccountName: example-application-myserviceaccount
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - application
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - example
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - example2
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: cc
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-aa:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TEST"
              value: aa
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          command:
            - sleep
            - "3600"
          workingDir: /tmp
        - name: dd
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-bb:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MY_ENV_VAR"
              value: some-value
          terminationMessagePolicy: FallbackToLogsOnError
          args:
            - sleep
            - "3600"
          volumeMounts:
            - mountPath: /tmp/my-volume/config
              name: my-volume
              readOnly: true
              subPath: config
            - mountPath: /tmp/my-volume/data
              name: my-volume
              subPath: data

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: http

      volumes:
        - name: my-volume
          emptyDir: {}
        - name: my-volume-2
          emptyDir: {}
---
# Source: application/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-with-name-override-example3
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example3
spec:
  replicas: 2
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: with-name-override
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: example3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: with-name-override
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: example3
    spec:
      imagePullSecrets:
        - name: example-application-docker-registry
      serviceAccountName: example-application-myserviceaccount
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - with-name-override
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - example
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - example3
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: cc
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-aa:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TEST"
              value: aa
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          command:
            - sleep
            - "3600"
          workingDir: /tmp
        - name: dd
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-bb:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MY_ENV_VAR"
              value: some-value
          terminationMessagePolicy: FallbackToLogsOnError
          args:
            - sleep
            - "3600"
          volumeMounts:
            - mountPath: /tmp/my-volume/config
              name: my-volume
              readOnly: true
              subPath: config
            - mountPath: /tmp/my-volume/data
              name: my-volume
              subPath: data

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: http

      volumes:
        - name: my-volume
          emptyDir: {}
        - name: my-volume-2
          emptyDir: {}
---
# Source: application/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-application-example4
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example4
spec:
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: example4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: application
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: example4
    spec:
      imagePullSecrets:
        - name: example-application-docker-registry
      serviceAccountName: example-application-myserviceaccount
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: k1
                    operator: In
                    values:
                      - "v1"
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: application/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-application-example5
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example5
spec:
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: example5
  template:
    metadata:
      labels:
        app.kubernetes.io/name: application
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: example5
    spec:
      imagePullSecrets:
        - name: example-application-docker-registry
      serviceAccountName: example-application-myserviceaccount
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: k1
                    operator: In
                    values:
                      - "v1"
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: application/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-application-internal
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: internal
spec:
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: internal
  template:
    metadata:
      labels:
        app.kubernetes.io/name: application
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: internal
    spec:
      imagePullSecrets:
        - name: example-application-docker-registry
      serviceAccountName: example-application-myserviceaccount
      securityContext:
        {}
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "CONFIG_MAP_OVERRIDE"
              valueFrom:
                configMapKeyRef:
                  name: "test-overridden"
                  key: "testSingleLine"
            - name: "SELF_CONFIGMAP"
              valueFrom:
                configMapKeyRef:
                  name: example-application
                  key: "testSingleLine"
            - name: "SELF_METADATA"
              valueFrom:
                configMapKeyRef:
                  name: example-application-metadata
                  key: "CHART_NAME"
            - name: "SELF_SECRET"
              valueFrom:
                secretKeyRef:
                  name: example-application
                  key: "test"
            - name: "SELF_VAULT"
              valueFrom:
                secretKeyRef:

                  name: example-application-app
                  key: "hostname"
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: application/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: example-application-example5
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example5
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: example-application-example5
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 50
          type: Utilization
      type: Resource
---
# Source: application/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: example-application-nginx
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: nginx
spec:
  serviceName: nginx
  replicas: 3
  minReadySeconds: 10
  podManagementPolicy: Parallel
  ordinals:
      start: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: nginx
  persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Delete
  updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  volumeClaimTemplates:
      - metadata:
          name: www
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
          storageClassName: my-storage-class
  template:
    metadata:
      labels:
        app.kubernetes.io/name: application
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: nginx
    spec:
      imagePullSecrets:
        - name: example-application-docker-registry
      serviceAccountName: example-application-myserviceaccount
      securityContext:
        {}
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: application/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: example-application-statefulset-min
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: statefulset-min
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: statefulset-min
  template:
    metadata:
      labels:
        app.kubernetes.io/name: application
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: statefulset-min
    spec:
      imagePullSecrets:
        - name: example-application-docker-registry
      serviceAccountName: example-application-myserviceaccount
      securityContext:
        {}
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: application/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: example-application-job-all
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: job-all
spec:
  backoffLimit: 5
  completions: 10
  parallelism: 3
  completionMode: Indexed
  activeDeadlineSeconds: 600
  ttlSecondsAfterFinished: 600
  podFailurePolicy:
      rules:
      - action: FailJob
        onExitCodes:
          containerName: main
          operator: In
          values:
          - 42
      - action: Ignore
        onPodConditions:
        - type: DisruptionTarget
  template:
    metadata:
      labels:
        app.kubernetes.io/name: application
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: job-all
    spec:
      imagePullSecrets:
        - name: example-application-docker-registry
      serviceAccountName: example-application-myserviceaccount
      securityContext:
        {}
      restartPolicy: Never
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: application/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: example-application-job-min
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: job-min
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: application
        app.kubernetes.io/instance: example
        app.kubernetes.io/component: job-min
    spec:
      imagePullSecrets:
        - name: example-application-docker-registry
      serviceAccountName: example-application-myserviceaccount
      securityContext:
        {}
      restartPolicy: Never
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: application/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: example-application-cronjob-all
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: cronjob-all
spec:
  schedule: "*/1 * * * *"
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 5
      completions: 10
      parallelism: 3
      completionMode: Indexed
      activeDeadlineSeconds: 600
      ttlSecondsAfterFinished: 600
      podFailurePolicy:
        rules:
        - action: FailJob
          onExitCodes:
            containerName: main
            operator: In
            values:
            - 42
        - action: Ignore
          onPodConditions:
          - status: "True"
            type: DisruptionTarget
      template:
        metadata:
          labels:
            app.kubernetes.io/name: application
            app.kubernetes.io/instance: example
            app.kubernetes.io/component: cronjob-all
        spec:
          imagePullSecrets:
            - name: example-application-docker-registry
          serviceAccountName: example-application-myserviceaccount
          securityContext:
            {}
          restartPolicy: Never
          containers:
            - name: main
              securityContext:
                runAsNonRoot: true
                runAsUser: 33
              image: "camptocamp/image:latest"
              imagePullPolicy: IfNotPresent
              terminationMessagePolicy: FallbackToLogsOnError
---
# Source: application/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-application-host1
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: host1
  annotations:
    example-annotation: coucou
spec:
# Add tls only if ingress.tls.enabled is set to true and the other fields are complete.
  tls:
    - hosts:
        - "test1.example.com"
        - "test2.example.com"
      secretName: my-tls-secret
  rules:
    - host: "test1.example.com"
      http:
        paths:
          - path: "/one"
            pathType: Prefix
            backend:
              service:
                name: example-application-with-service-name
                port:
                  number: 8080
          - path: "/two"
            pathType: Prefix
            backend:
              service:
                name: exa-example2
                port:
                  number: 8080
          - path: "/three"
            pathType: Prefix
            backend:
              service:
                name: hardcoded-service-name
                port:
                  number: 8080
    - host: "test2.example.com"
      http:
        paths:
          - path: "/one"
            pathType: Prefix
            backend:
              service:
                name: example-application-with-service-name
                port:
                  number: 8080
          - path: "/two"
            pathType: Prefix
            backend:
              service:
                name: exa-example2
                port:
                  number: 8080
          - path: "/three"
            pathType: Prefix
            backend:
              service:
                name: hardcoded-service-name
                port:
                  number: 8080
---
# Source: application/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-application-host2
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: host2
  annotations:
    example-annotation: coucou
spec:
# Add tls only if ingress.tls.enabled is set to true and the other fields are complete.
  tls:
    - hosts:
        - "*.example.com"
      secretName: example-application-host2
  rules:
    - host: "*.example.com"
      http:
        paths:
          - path: "/one"
            pathType: Prefix
            backend:
              service:
                name: example-application-with-service-name
                port:
                  number: 8080
          - path: "/two"
            pathType: Prefix
            backend:
              service:
                name: exa-example2
                port:
                  number: 8080
          - path: "/three"
            pathType: Prefix
            backend:
              service:
                name: hardcoded-service-name
                port:
                  number: 8080
---
# Source: application/templates/external-secret-docker-registry.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: example-application-docker-registry
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: main
  annotations:
    testAnnotation: annotation value
spec:
  target:
    name: example-application-docker-registry
    template:
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: |-
          {
            "auths": {
              "https://index.docker.io/v1/": {
                "auth": "YzJjZ2lzYm90OjEyMzQ=",
                "username": "c2cgisbot",
                "password": "1234",
                "email": "docker-hub@camptocamp.com"
              },
              "docker.io": {
                "auth": "YzJjZ2lzYm90OjEyMzQ=",
                "username": "c2cgisbot",
                "password": "1234",
                "email": "docker-hub@camptocamp.com"
              },
              "{{ .ghcr_io_url }}": {
                "auth": {{ ( printf "%s:%s" .ghcr_io_username .ghcr_io_password ) | b64enc | quote }},
                "username": "{{ .ghcr_io_username }}",
                "password": "{{ .ghcr_io_password }}",
                "email": "{{ .ghcr_io_email }}"
              },
              "ghcr.io": {
                "auth": {{ ( printf "%s:my-password" .password_username ) | b64enc | quote }},
                "username": "{{ .password_username }}",
                "password": "my-password",
                "email": "geospatial-bot@camptocamp.com"
              },
              "ghcr.io": {
                "auth": {{ ( printf "my-username:%s" .user_password ) | b64enc | quote }},
                "username": "my-username",
                "password": "{{ .user_password }}",
                "email": "geospatial-bot@camptocamp.com"
              },
              "fix-end-comma": {"auth": ""}
            }
          }
  data:
    - secretKey: ghcr_io_username
      remoteRef:
        key: ghcr-username
    - secretKey: ghcr_io_password
      remoteRef:
        key: ghcr-password
    - secretKey: ghcr_io_email
      remoteRef:
        key: ghcr-email
    - secretKey: ghcr_io_url
      remoteRef:
        key: ghcr-url
    - secretKey: password_username
      remoteRef:
        key: ghcr-username
    - secretKey: user_password
      remoteRef:
        key: ghcr-password
---
# Source: application/templates/external-secret.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: example-application-app
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: app
spec:
  refreshInterval: 1h
  secretStoreRef:
    kind: SecretStore
    name: my-secret-store
  target:
    name: example-application-app
  data:
    - secretKey: hostname
      remoteRef:
        key: hostname
---
# Source: application/templates/external-secret.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: example-application-global
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: global
spec:
  refreshInterval: 1h
  secretStoreRef:
    kind: SecretStore
    name: my-global-secret-store
  target:
    name: example-application-global
  data:
    - secretKey: pass
      remoteRef:
        key: pass
---
# Source: application/templates/podmonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: example-application-with-service-name
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: with-service-name
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: with-service-name
  podMetricsEndpoints:
    - port: config-prometheus
      honorLabels: true
      interval: 10s
    - port: prometheus
      honorLabels: true
      interval: 10s
---
# Source: application/templates/podmonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: example-application-example4
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example4
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: example4
  podMetricsEndpoints:
    - port: prometheus
      honorLabels: true
      interval: 10s
---
# Source: application/templates/podmonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: example-application-example5
  labels:
    helm.sh/chart: application
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: application
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: example5
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: application
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: example5
  podMetricsEndpoints:
    - port: prometheus
      honorLabels: true
      interval: 10s

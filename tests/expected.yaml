---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: custom-custom-pod-cronjob-all
  labels:
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: cronjob-all
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: cronjob-all
---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: custom-custom-pod-deployment-all
  labels:
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: deployment-all
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: deployment-all
---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: custom-custom-pod-deployment-min
  labels:
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: deployment-min
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: deployment-min
---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: custom-custom-pod-with-service-name
  labels:
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: with-service-name
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: with-service-name
---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cus-example2
  labels:
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example2
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: with-name-override
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: example2
---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: custom-with-name-override-example3
  labels:
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example3
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: with-name-override
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: example3
---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: custom-custom-pod-internal
  labels:
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: internal
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: internal
---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: custom-custom-pod-job-all
  labels:
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: job-all
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: job-all
---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: custom-custom-pod-job-min
  labels:
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: job-min
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: job-min
---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: custom-custom-pod-nginx
  labels:
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: nginx
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: nginx
---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: custom-custom-pod-statefulset-min
  labels:
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: statefulset-min
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: statefulset-min
---
# Source: custom-pod/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example3-service-account
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: main
  annotations:
    example-annotation: coucou
---
# Source: custom-pod/templates/secret-docker-registry.yaml
apiVersion: v1
kind: Secret
metadata:
  name: custom-custom-pod-dockerregistry
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: main
  annotations:
    testAnnotation: annotation value
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ewogICJhdXRocyI6IHsKICAgICJkb2NrZXIuaW8iOiB7CiAgICAgICJhdXRoIjogIll6SmpaMmx6WW05ME9qRXlNelE9IiwKICAgICAgInVzZXJuYW1lIjogImMyY2dpc2JvdCIsCiAgICAgICJwYXNzd29yZCI6ICIxMjM0IiwKICAgICAgImVtYWlsIjogImRvY2tlci1odWJAY2FtcHRvY2FtcC5jb20iCiAgICB9LAogICAgImdoY3IuaW8iOiB7CiAgICAgICJhdXRoIjogIll6SmpMV0p2ZEMxbmFYTXRZMms2TVRJek5BPT0iLAogICAgICAidXNlcm5hbWUiOiAiYzJjLWJvdC1naXMtY2kiLAogICAgICAicGFzc3dvcmQiOiAiMTIzNCIsCiAgICAgICJlbWFpbCI6ICJnZW9zcGF0aWFsLWJvdEBjYW1wdG9jYW1wLmNvbSIKICAgIH0sCiAgICAiaHR0cHM6Ly9pbmRleC5kb2NrZXIuaW8vdjEvIjogewogICAgICAiYXV0aCI6ICJZekpqWjJselltOTBPakV5TXpRPSIsCiAgICAgICJ1c2VybmFtZSI6ICJjMmNnaXNib3QiLAogICAgICAicGFzc3dvcmQiOiAiMTIzNCIsCiAgICAgICJlbWFpbCI6ICJkb2NrZXItaHViQGNhbXB0b2NhbXAuY29tIgogICAgfSwKICAgICJmaXgtZW5kLWNvbW1hIjogeyJhdXRoIjogIiJ9CiAgfQp9
---
# Source: custom-pod/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: custom-custom-pod
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: main
  annotations:
    testAnnotation: annotation value for secrets
type: generic
data:
  test: dG90bw==
  test2: dG90bzI=
  test3: "UW1GemFXTWdkRzkwYnpwMGIzUnY="
---
# Source: custom-pod/templates/cm_metadata.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cus-custom-pod
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: main
data:
  CHART_NAME: custom-pod
  RELEASE_NAME: custom
  RELEASE_NAMESPACE: default
  SERVICE_CRONJOB-ALL_NAME: custom-custom-pod-cronjob-all
  SERVICE_CRONJOB-ALL_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_DEPLOYMENT-ALL_NAME: custom-custom-pod-deployment-all
  SERVICE_DEPLOYMENT-ALL_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_DEPLOYMENT-MIN_NAME: custom-custom-pod-deployment-min
  SERVICE_DEPLOYMENT-MIN_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE1_NAME: custom-custom-pod-with-service-name
  SERVICE_EXAMPLE1_CONTAINER_AA_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE1_CONTAINER_BB_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE1_CONTAINER_CC_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE1_CONTAINER_DD_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE2_NAME: cus-example2
  SERVICE_EXAMPLE2_CONTAINER_CC_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE2_CONTAINER_DD_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE3_NAME: hardcoded-service-name
  SERVICE_EXAMPLE3_CONTAINER_CC_IMAGE_TAG: "latest"
  SERVICE_EXAMPLE3_CONTAINER_DD_IMAGE_TAG: "latest"
  SERVICE_INTERNAL_NAME: custom-custom-pod-internal
  SERVICE_INTERNAL_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_JOB-ALL_NAME: custom-custom-pod-job-all
  SERVICE_JOB-ALL_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_JOB-MIN_NAME: custom-custom-pod-job-min
  SERVICE_JOB-MIN_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_STATEFULSET-ALL_NAME: custom-custom-pod-nginx
  SERVICE_STATEFULSET-ALL_CONTAINER_MAIN_IMAGE_TAG: "latest"
  SERVICE_STATEFULSET-MIN_NAME: custom-custom-pod-statefulset-min
  SERVICE_STATEFULSET-MIN_CONTAINER_MAIN_IMAGE_TAG: "latest"
---
# Source: custom-pod/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-custom-pod
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: main
  annotations:
    testAnnotation: annotation value for configmaps
data:
  testJson: |-
    {"titi":"titi","toto":"toto","tutu":"tutu"}
  testMultiLine: |-
    toto2
    titi
    tutu
  testSingleLine: |-
    toto
  testYaml: |-
    titi: titi
    toto: toto
    tutu: tutu
---
# Source: custom-pod/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: custom-custom-pod-with-service-name
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: with-service-name
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: with-service-name
---
# Source: custom-pod/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cus-example2
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example2
    one-custom-label: hello-world
  annotations:
    one-custom-annotation: abc
    two-custom-annotations: xyz
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example2
---
# Source: custom-pod/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hardcoded-service-name
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example3
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example3
---
# Source: custom-pod/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: custom-custom-pod-deployment-all
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: deployment-all
spec:
  replicas: 3
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
  progressDeadlineSeconds: 600
  minReadySeconds: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: deployment-all
  template:
    metadata:
      labels:
        app.kubernetes.io/name: custom-pod
        app.kubernetes.io/instance: custom
        app.kubernetes.io/component: deployment-all
    spec:
      serviceAccountName: example3-service-account
      securityContext:
        {}
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: custom-pod/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: custom-custom-pod-deployment-min
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: deployment-min
spec:
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: deployment-min
  template:
    metadata:
      labels:
        app.kubernetes.io/name: custom-pod
        app.kubernetes.io/instance: custom
        app.kubernetes.io/component: deployment-min
    spec:
      serviceAccountName: example3-service-account
      securityContext:
        {}
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: custom-pod/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: custom-custom-pod-with-service-name
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: with-service-name
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: with-service-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: custom-pod
        app.kubernetes.io/instance: custom
        app.kubernetes.io/component: with-service-name
    spec:
      serviceAccountName: example3-service-account
      securityContext:
        {}
      initContainers:
        - name: aa
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-aa:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TEST"
              value: aa
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          command:
            - sleep
            - "3600"
        - name: bb
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-bb:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MY_ENV_VAR"
              value: some-value
          terminationMessagePolicy: FallbackToLogsOnError
          args:
            - sleep
            - "3600"
          volumeMounts:
            - mountPath: /tmp/my-volume/config
              name: my-volume
              readOnly: true
              subPath: config
            - mountPath: /tmp/my-volume/data
              name: my-volume
              subPath: data

      containers:
        - name: cc
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-aa:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TEST"
              value: aa
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          command:
            - sleep
            - "3600"
        - name: dd
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-bb:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MY_ENV_VAR"
              value: some-value
          terminationMessagePolicy: FallbackToLogsOnError
          args:
            - sleep
            - "3600"
          volumeMounts:
            - mountPath: /tmp/my-volume/config
              name: my-volume
              readOnly: true
              subPath: config
            - mountPath: /tmp/my-volume/data
              name: my-volume
              subPath: data

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: /heals/liveness
              port: http
          readinessProbe:
            httpGet:
              path: /heals/readiness
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /heals/startup
              port: http
      volumes:
        - name: my-device-volume
          persistentVolumeClaim:
            claimName: pvc-name
        - name: my-volume
          emptyDir: {}
---
# Source: custom-pod/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cus-example2
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example2
spec:
  replicas: 2
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: with-name-override
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: example2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: with-name-override
        app.kubernetes.io/instance: custom
        app.kubernetes.io/component: example2
    spec:
      serviceAccountName: example3-service-account
      securityContext:
        {}
      containers:
        - name: cc
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-aa:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TEST"
              value: aa
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          command:
            - sleep
            - "3600"
        - name: dd
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-bb:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MY_ENV_VAR"
              value: some-value
          terminationMessagePolicy: FallbackToLogsOnError
          args:
            - sleep
            - "3600"
          volumeMounts:
            - mountPath: /tmp/my-volume/config
              name: my-volume
              readOnly: true
              subPath: config
            - mountPath: /tmp/my-volume/data
              name: my-volume
              subPath: data

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: http
      volumes:
        - name: my-volume
          emptyDir: {}
        - name: my-volume-2
          emptyDir: {}
---
# Source: custom-pod/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: custom-with-name-override-example3
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example3
spec:
  replicas: 2
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: with-name-override
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: example3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: with-name-override
        app.kubernetes.io/instance: custom
        app.kubernetes.io/component: example3
    spec:
      serviceAccountName: example3-service-account
      securityContext:
        {}
      containers:
        - name: cc
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-aa:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TEST"
              value: aa
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          command:
            - sleep
            - "3600"
        - name: dd
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/custom-bb:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MY_ENV_VAR"
              value: some-value
          terminationMessagePolicy: FallbackToLogsOnError
          args:
            - sleep
            - "3600"
          volumeMounts:
            - mountPath: /tmp/my-volume/config
              name: my-volume
              readOnly: true
              subPath: config
            - mountPath: /tmp/my-volume/data
              name: my-volume
              subPath: data

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: http
      volumes:
        - name: my-volume
          emptyDir: {}
        - name: my-volume-2
          emptyDir: {}
---
# Source: custom-pod/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: custom-custom-pod-internal
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: internal
spec:
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: internal
  template:
    metadata:
      labels:
        app.kubernetes.io/name: custom-pod
        app.kubernetes.io/instance: custom
        app.kubernetes.io/component: internal
    spec:
      serviceAccountName: example3-service-account
      securityContext:
        {}
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "SELF_CONFIGMAP"
              valueFrom:
                configMapKeyRef:
                  name: custom-custom-pod
                  key: "testSingleLine"
            - name: "SELF_METADATA"
              valueFrom:
                configMapKeyRef:
                  name: cus-custom-pod
                  key: "CHART_NAME"
            - name: "SELF_SECRET"
              valueFrom:
                secretKeyRef:
                  name: custom-custom-pod
                  key: "test"
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: custom-pod/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: custom-custom-pod-nginx
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: nginx
spec:
  serviceName: nginx
  replicas: 3
  minReadySeconds: 10
  podManagementPolicy: Parallel
  ordinals:
      start: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: nginx
  persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Delete
  updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  volumeClaimTemplates:
      - metadata:
          name: www
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
          storageClassName: my-storage-class
  template:
    metadata:
      labels:
        app.kubernetes.io/name: custom-pod
        app.kubernetes.io/instance: custom
        app.kubernetes.io/component: nginx
    spec:
      serviceAccountName: example3-service-account
      securityContext:
        {}
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: custom-pod/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: custom-custom-pod-statefulset-min
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: statefulset-min
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: statefulset-min
  template:
    metadata:
      labels:
        app.kubernetes.io/name: custom-pod
        app.kubernetes.io/instance: custom
        app.kubernetes.io/component: statefulset-min
    spec:
      serviceAccountName: example3-service-account
      securityContext:
        {}
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: custom-pod/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: custom-custom-pod-job-all
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: job-all
spec:
  backoffLimit: 5
  completions: 10
  parallelism: 3
  completionMode: Indexed
  activeDeadlineSeconds: 600
  ttlSecondsAfterFinished: 600
  podFailurePolicy:
      rules:
      - action: FailJob
        onExitCodes:
          containerName: main
          operator: In
          values:
          - 42
      - action: Ignore
        onPodConditions:
        - type: DisruptionTarget
  template:
    metadata:
      labels:
        app.kubernetes.io/name: custom-pod
        app.kubernetes.io/instance: custom
        app.kubernetes.io/component: job-all
    spec:
      serviceAccountName: example3-service-account
      securityContext:
        {}
      restartPolicy: Never
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: custom-pod/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: custom-custom-pod-job-min
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: job-min
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: custom-pod
        app.kubernetes.io/instance: custom
        app.kubernetes.io/component: job-min
    spec:
      serviceAccountName: example3-service-account
      securityContext:
        {}
      restartPolicy: Never
      containers:
        - name: main
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/image:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
---
# Source: custom-pod/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: custom-custom-pod-cronjob-all
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: cronjob-all
spec:
  schedule: "*/1 * * * *"
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 5
      completions: 10
      parallelism: 3
      completionMode: Indexed
      activeDeadlineSeconds: 600
      ttlSecondsAfterFinished: 600
      podFailurePolicy:
        rules:
        - action: FailJob
          onExitCodes:
            containerName: main
            operator: In
            values:
            - 42
        - action: Ignore
          onPodConditions:
          - status: "True"
            type: DisruptionTarget
      template:
        metadata:
          labels:
            app.kubernetes.io/name: custom-pod
            app.kubernetes.io/instance: custom
            app.kubernetes.io/component: cronjob-all
        spec:
          serviceAccountName: example3-service-account
          securityContext:
            {}
          restartPolicy: Never
          containers:
            - name: main
              securityContext:
                runAsNonRoot: true
                runAsUser: 33
              image: "camptocamp/image:latest"
              imagePullPolicy: IfNotPresent
              terminationMessagePolicy: FallbackToLogsOnError
---
# Source: custom-pod/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cus-custom-pod-host1
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: main
  annotations:
    example-annotation: coucou
spec:
# Add tls only if ingress.tls.enabled is set to true and the other fields are complete.
  tls:
    - hosts:
        - "test1.example.com"
        - "test2.example.com"
      secretName: my-tls-secret
  rules:
    - host: "test1.example.com"
      http:
        paths:
          - path: "/one"
            pathType: Prefix
            backend:
              service:
                name: custom-custom-pod-with-service-name
                port:
                  number: 8080
          - path: "/two"
            pathType: Prefix
            backend:
              service:
                name: cus-example2
                port:
                  number: 8080
          - path: "/three"
            pathType: Prefix
            backend:
              service:
                name: hardcoded-service-name
                port:
                  number: 8080
    - host: "test2.example.com"
      http:
        paths:
          - path: "/one"
            pathType: Prefix
            backend:
              service:
                name: custom-custom-pod-with-service-name
                port:
                  number: 8080
          - path: "/two"
            pathType: Prefix
            backend:
              service:
                name: cus-example2
                port:
                  number: 8080
          - path: "/three"
            pathType: Prefix
            backend:
              service:
                name: hardcoded-service-name
                port:
                  number: 8080
---
# Source: custom-pod/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cus-custom-pod-host2
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: main
  annotations:
    example-annotation: coucou
spec:
# Add tls only if ingress.tls.enabled is set to true and the other fields are complete.
  tls:
    - hosts:
        - "*.example.com"
      secretName: my-tls-secret
  rules:
    - host: "*.example.com"
      http:
        paths:
          - path: "/one"
            pathType: Prefix
            backend:
              service:
                name: custom-custom-pod-with-service-name
                port:
                  number: 8080
          - path: "/two"
            pathType: Prefix
            backend:
              service:
                name: cus-example2
                port:
                  number: 8080
          - path: "/three"
            pathType: Prefix
            backend:
              service:
                name: hardcoded-service-name
                port:
                  number: 8080
---
# Source: custom-pod/templates/podmonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: custom-custom-pod-with-service-name
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: with-service-name
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: with-service-name
  podMetricsEndpoints:
    -
      honorLabels: true
      interval: 10s
      port: prometheus

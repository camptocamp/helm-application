---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: custom-custom-pod-with-service-name
  labels:
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: with-service-name
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: with-service-name
---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: custom-with-name-override-example2
  labels:
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example2
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: with-name-override
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: example2
---
# Source: custom-pod/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: custom-with-name-override-example3
  labels:
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example3
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: with-name-override
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: example3
---
# Source: custom-pod/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: custom-custom-pod-with-service-name
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: with-service-name
    prometheus: "true"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: with-service-name
---
# Source: custom-pod/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: custom-with-name-override-example2
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example2
    prometheus: "true"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example2
---
# Source: custom-pod/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hardcoded-service-name
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example3
    prometheus: "true"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example3
---
# Source: custom-pod/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: custom-custom-pod-with-service-name
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: with-service-name
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: custom-pod
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: with-service-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: custom-pod
        app.kubernetes.io/instance: custom
        app.kubernetes.io/component: with-service-name
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        {}
      initContainers:
        - name: aa
          securityContext:
            {}
          image: "camptocamp/custom-aa:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TEST"
              value: aa
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          command:
            - sleep
            - "3600"
        - name: bb
          securityContext:
            {}
          image: "camptocamp/custom-bb:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MY_ENV_VAR"
              value: some-value
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            null
          args:
            - sleep
            - "3600"
          volumeMounts:
            - mountPath: /tmp/my-volume/config
              name: my-volume
              readOnly: true
              subPath: config
            - mountPath: /tmp/my-volume/data
              name: my-volume
              subPath: data

          volumeDevices:
            - devicePath: /dev/xvda
              name: my-device-volume

      containers:
        - name: cc
          securityContext:
            {}
          image: "camptocamp/custom-aa:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TEST"
              value: aa
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          command:
            - sleep
            - "3600"
        - name: dd
          securityContext:
            {}
          image: "camptocamp/custom-bb:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MY_ENV_VAR"
              value: some-value
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            null
          args:
            - sleep
            - "3600"
          volumeMounts:
            - mountPath: /tmp/my-volume/config
              name: my-volume
              readOnly: true
              subPath: config
            - mountPath: /tmp/my-volume/data
              name: my-volume
              subPath: data

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
      volumes:
        - name: my-device-volume
          persistentVolumeClaim:
            claimName: pvc-name
        - name: my-volume
          emptyDir: {}
---
# Source: custom-pod/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: custom-with-name-override-example2
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example2
spec:
  replicas: 2
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: with-name-override
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: example2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: with-name-override
        app.kubernetes.io/instance: custom
        app.kubernetes.io/component: example2
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        {}
      containers:
        - name: cc
          securityContext:
            {}
          image: "camptocamp/custom-aa:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TEST"
              value: aa
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          command:
            - sleep
            - "3600"
        - name: dd
          securityContext:
            {}
          image: "camptocamp/custom-bb:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MY_ENV_VAR"
              value: some-value
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            null
          args:
            - sleep
            - "3600"
          volumeMounts:
            - mountPath: /tmp/my-volume/config
              name: my-volume
              readOnly: true
              subPath: config
            - mountPath: /tmp/my-volume/data
              name: my-volume
              subPath: data

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
      volumes:
        - name: my-volume
          emptyDir: {}
        - name: my-volume-2
          emptyDir: {}
---
# Source: custom-pod/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: custom-with-name-override-example3
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: with-name-override
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: example3
spec:
  replicas: 2
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: with-name-override
      app.kubernetes.io/instance: custom
      app.kubernetes.io/component: example3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: with-name-override
        app.kubernetes.io/instance: custom
        app.kubernetes.io/component: example3
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        {}
      containers:
        - name: cc
          securityContext:
            {}
          image: "camptocamp/custom-aa:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TEST"
              value: aa
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          command:
            - sleep
            - "3600"
        - name: dd
          securityContext:
            {}
          image: "camptocamp/custom-bb:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MY_ENV_VAR"
              value: some-value
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            null
          args:
            - sleep
            - "3600"
          volumeMounts:
            - mountPath: /tmp/my-volume/config
              name: my-volume
              readOnly: true
              subPath: config
            - mountPath: /tmp/my-volume/data
              name: my-volume
              subPath: data

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
      volumes:
        - name: my-volume
          emptyDir: {}
        - name: my-volume-2
          emptyDir: {}
---
# Source: custom-pod/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: custom-custom-pod-host1
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: main
spec:
# Add tls only if ingress.tls.enabled is set to true and the other fields are complete.
  tls:
    - hosts:
        - "test1.example.com"
        - "test2.example.com"
      secretName: my-tls-secret
  rules:
    - host: "test1.example.com"
      http:
        paths:
          - path: "/one"
            pathType: Prefix
            backend:
              service:
                name: custom-custom-pod-with-service-name
                port:
                  number: 8080
          - path: "/two"
            pathType: Prefix
            backend:
              service:
                name: custom-with-name-override-example2
                port:
                  number: 8080
          - path: "/three"
            pathType: Prefix
            backend:
              service:
                name: hardcoded-service-name
                port:
                  number: 8080
    - host: "test2.example.com"
      http:
        paths:
          - path: "/one"
            pathType: Prefix
            backend:
              service:
                name: custom-custom-pod-with-service-name
                port:
                  number: 8080
          - path: "/two"
            pathType: Prefix
            backend:
              service:
                name: custom-with-name-override-example2
                port:
                  number: 8080
          - path: "/three"
            pathType: Prefix
            backend:
              service:
                name: hardcoded-service-name
                port:
                  number: 8080
---
# Source: custom-pod/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: custom-custom-pod-host2
  labels:
    helm.sh/chart: custom-pod
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-pod
    app.kubernetes.io/instance: custom
    app.kubernetes.io/component: main
spec:
# Add tls only if ingress.tls.enabled is set to true and the other fields are complete.
  tls:
    - hosts:
        - "*.example.com"
      secretName: my-tls-secret
  rules:
    - host: "*.example.com"
      http:
        paths:
          - path: "/one"
            pathType: Prefix
            backend:
              service:
                name: custom-custom-pod-with-service-name
                port:
                  number: 8080
          - path: "/two"
            pathType: Prefix
            backend:
              service:
                name: custom-with-name-override-example2
                port:
                  number: 8080
          - path: "/three"
            pathType: Prefix
            backend:
              service:
                name: hardcoded-service-name
                port:
                  number: 8080

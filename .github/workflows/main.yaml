name: Continuous integration

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:

permissions:
  actions: write
  contents: write

env:
  HAS_SECRETS: ${{ secrets.HAS_SECRETS }}

jobs:
  main:
    name: Continuous integration
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    strategy:
      fail-fast: true
      matrix:
        helm:
          - latest
          - 3.5.1

    steps:
      - run: docker system prune --all --force
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: camptocamp/initialise-gopass-summon-action@v2
        with:
          ci-gpg-private-key: ${{secrets.CI_GPG_PRIVATE_KEY}}
          github-gopass-ci-token: ${{secrets.GOPASS_CI_GITHUB_TOKEN}}
        if: env.HAS_SECRETS == 'HAS_SECRETS'

      - uses: actions/setup-python@v6
        with:
          python-version: '3.14'
      - run: python3 -m pip install --requirement=ci/requirements.txt

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: "pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\npre-commit-"
      - run: pre-commit run --all-files --color=always
        env:
          SKIP: helm-lock
      - run: git diff --exit-code --patch > /tmp/pre-commit.patch; git diff --color; git reset --hard || true
        if: failure()
      - uses: actions/upload-artifact@v5
        with:
          name: Apply pre-commit fix.patch
          path: /tmp/pre-commit.patch
          retention-days: 1
        if: failure()
      - name: Print environment information
        run: c2cciutils-env
        env:
          GITHUB_EVENT: ${{ toJson(github) }}

      - name: Install helm
        uses: azure/setup-helm@v4
        with:
          version: ${{ matrix.helm }}
      - run: helm dependency update .
      - run: helm lint .
        if: matrix.helm == 'latest'
      - run: helm lint --values=tests/values.yaml .
        if: matrix.helm == 'latest'

      - name: Setup k3s/k3d
        run: c2cciutils-k8s-install

      - name: Install prometheus CRD
        run: |
          curl https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/jsonnet/prometheus-operator/podmonitors-crd.json --output /tmp/podmonitors-crd.json
          kubectl apply -f /tmp/podmonitors-crd.json
      - name: Install external-secret CRD
        run: |
          curl https://raw.githubusercontent.com/external-secrets/external-secrets/v0.16.1/deploy/crds/bundle.yaml --output /tmp/external-secrets-crd.yaml
          kubectl apply -f /tmp/external-secrets-crd.yaml
      - name: Install Traefik CRD
        run: |
          curl https://raw.githubusercontent.com/traefik/traefik-helm-chart/v36.1.0/traefik/crds/traefik.io_middlewares.yaml --output /tmp/traefik-middlewares-crd.yaml
          kubectl apply -f /tmp/traefik-middlewares-crd.yaml
          curl https://raw.githubusercontent.com/traefik/traefik-helm-chart/v36.1.0/traefik/crds/traefik.io_ingressroutes.yaml --output /tmp/traefik-ingressroutes-crd.yaml
          kubectl apply -f /tmp/traefik-ingressroutes-crd.yaml

      - name: Apply
        run: kubectl apply -f tests/expected.yaml

      - name: Publish
        run: tag-publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: matrix.helm == 'latest'
      - run: git diff --exit-code --patch > /tmp/dpkg-versions.patch; git diff --color; git reset --hard || true
        if: failure()
      - uses: actions/upload-artifact@v5
        with:
          name: Update dpkg versions list.patch
          path: /tmp/dpkg-versions.patch
          retention-days: 1
        if: failure()
